# https://github.com/AnomalyInnovations/serverless-stack-demo-mono-api

service: webp-create--bucket

custom:
    get-firebase-token-service-name: webp-create--get-firebase-token
    bucket-name: ${self:provider.stage}-${self:service}--img-upload-2
    jwtVenderLayer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:layer:WebpCreateVendorJwt:5
    apigwBinary:
        types:
            - 'multipart/form-data'

plugins:
    - serverless-pseudo-parameters
    - serverless-apigw-binary

provider:
    name: aws
    runtime: nodejs8.10

    stage: dev
    region: us-west-2

    apiGateway:
        restApiId:
            'Fn::ImportValue': ${self:provider.stage}-${self:custom.get-firebase-token-service-name}-ApiGatewayRestApiId
        restApiRootResourceId:
            'Fn::ImportValue': ${self:provider.stage}-${self:custom.get-firebase-token-service-name}-ApiGatewayRestApiRootResourceId

    iamRoleStatements:
        - Effect: Allow
          Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectVersionAcl
              - s3:DeleteObject
          Resource:
              - arn:aws:s3:::${self:custom.bucket-name}/*

layers:
    WebpCreateVendorImagemin:
        path: ../lambda-layer--vendor--imagemin--aws
        compatibleRuntimes:
            - nodejs8.10
        licenseInfo: GPLv3
        allowedAccounts:
            - '*'

functions:
    DeleteImage:
        handler: deleteImage.handler
        timeout: 3
        memorySize: 128
        layers:
            - ${self:custom.jwtVenderLayer}
        events:
            - http:
                  path: images/{key}
                  method: delete
                  request:
                      parameters:
                          paths:
                              key: true
                  cors:
                      origin: '*'
                      headers:
                          - Content-Type
                          - X-Amz-Date
                          - Authorization
                          - X-Api-Key
                          - X-Amz-Security-Token
                          - X-Amz-User-Agent
                          - Cache-Control
                          - Pragma
                          - Debug
        environment:
            BUCKET: ${self:custom.bucket-name}
            SERVICE_ACCOUNT: video-transcoder-776cd-9964a6a1cc5d.encrypted.json
            DATABASE_URL: https://video-transcoder-776cd.firebaseio.com/

    ResizeImage:
        handler: resizeImage.handler
        timeout: 15
        memorySize: 1024
        layers:
            - { Ref: WebpCreateVendorImageminLambdaLayer }
            - ${self:custom.jwtVenderLayer}
        environment:
            BUCKET: ${self:custom.bucket-name}
            SERVICE_ACCOUNT: video-transcoder-776cd-9964a6a1cc5d.encrypted.json
            DATABASE_URL: https://video-transcoder-776cd.firebaseio.com/

    ListImages:
        handler: listImages.handler
        timeout: 3
        memorySize: 128
        events:
            - http:
                  path: images
                  method: get
                  cors: true
        environment:
            BUCKET: ${self:custom.bucket-name}

    PostImage:
        handler: postImage.handler
        events:
            - http:
                  path: images
                  method: post
                  cors:
                      origin: '*'
                      headers:
                          - Content-Type
                          - X-Amz-Date
                          - Authorization
                          - X-Api-Key
                          - X-Amz-Security-Token
                          - X-Amz-User-Agent
                          - Cache-Control
                          - Pragma
                          - Debug
        layers:
            - ${self:custom.jwtVenderLayer}
        environment:
            BUCKET: ${self:custom.bucket-name}

    UpdateImageMetadata:
        handler: updateImageMeta.handler
        events:
            - http:
                  path: images/{key}
                  method: post
                  request:
                      parameters:
                          paths:
                              key: true
                  cors:
                      origin: '*'
                      headers:
                          - Content-Type
                          - X-Amz-Date
                          - Authorization
                          - X-Api-Key
                          - X-Amz-Security-Token
                          - X-Amz-User-Agent
                          - Cache-Control
                          - Pragma
                          - Debug
        layers:
            - ${self:custom.jwtVenderLayer}
        environment:
            BUCKET: ${self:custom.bucket-name}

resources:
    Resources:
        ImageUploadBucket:
            Type: AWS::S3::Bucket
            # DeletionPolicy: Retain
            DependsOn: ResizeImageLambdaFunction
            Properties:
                AccessControl: PublicRead
                BucketName: ${self:custom.bucket-name}
                NotificationConfiguration:
                    LambdaConfigurations:
                        - Function: !GetAtt ResizeImageLambdaFunction.Arn
                          Event: s3:ObjectCreated:*
                          Filter:
                              S3Key:
                                  Rules:
                                      - Name: prefix
                                        Value: src
                CorsConfiguration:
                    CorsRules:
                        - AllowedOrigins:
                              - '*'
                          AllowedHeaders:
                              - '*'
                          AllowedMethods:
                              - GET
                              - PUT
                              - POST
                              - DELETE
                              - HEAD
                          MaxAge: 3000

        S3LambdaPermission:
            Type: AWS::Lambda::Permission
            Properties:
                Action: lambda:invokeFunction
                SourceAccount: !Ref 'AWS::AccountId'
                FunctionName: !GetAtt ResizeImageLambdaFunction.Arn
                Principal: s3.amazonaws.com
